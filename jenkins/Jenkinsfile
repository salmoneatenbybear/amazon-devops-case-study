pipeline {
  agent any
  environment {
    DOCKER_REGISTRY = 'adityasinghlikesjiujitsu'
    IMAGE_NAME = "${DOCKER_REGISTRY}/amazon-devops-app"
    TAG = "latest"
  }
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/salmoneatenbybear/amazon-devops-case-study.git'
      }
    }
    stage('Build') {
        steps {
            sh '''
            echo 📂 Listing contents for debug
            ls -la
            ls -la app/

            echo 🐳 Building Docker image with tag: latest
            docker build --no-cache -t ${IMAGE_NAME}:latest app/
            '''
        }
    }
    stage('Test') {
      steps {
        sh '''
        echo 🧪 Starting container for test...
    
        # Clean up existing container if exists
        docker rm -f test-app || true
    
        # Run container in background
        docker run -d --name test-app ${IMAGE_NAME}:${TAG}
    
        echo ⏳ Waiting for the app to start inside container...
        sleep 5
    
        echo 🔍 Executing curl *inside* the container to localhost:3000
    
        docker exec test-app sh -c "curl -sSf http://localhost:3000" || {
          echo ❌ App is not responding inside container.
          docker logs test-app
          docker rm -f test-app
          exit 1
        }
    
        echo ✅ App responded successfully.
        docker rm -f test-app
        '''
      }
    }
    stage('Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
          sh '''
          echo 🔐 Logging in to DockerHub
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

          echo 📤 Pushing image
          docker push ${IMAGE_NAME}:${TAG}
          '''
        }
      }
    }
    stage('Deploy') {
      steps {
        sh '''
        echo 📦 Installing kubectl...
    
        apt-get update && apt-get install -y curl gnupg apt-transport-https
    
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
        echo "deb https://apt.kubernetes.io/ kubernetes-bookworm main" > /etc/apt/sources.list.d/kubernetes.list
    
        apt-get update && apt-get install -y kubectl
    
        echo 🚀 Deploying to Kubernetes...
        kubectl apply -f kubernetes/
        '''
      }
    }
  }
}

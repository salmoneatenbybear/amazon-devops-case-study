pipeline {
  agent any
  environment {
    DOCKER_REGISTRY = 'adityasinghlikesjiujitsu'
    IMAGE_NAME = "${DOCKER_REGISTRY}/amazon-devops-app"
    TAG = "latest"
  }
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/salmoneatenbybear/amazon-devops-case-study.git'
      }
    }
    stage('Build') {
        steps {
            sh '''
            echo üìÇ Listing contents for debug
            ls -la
            ls -la app/

            echo üê≥ Building Docker image with tag: latest
            docker build --no-cache -t ${IMAGE_NAME}:latest app/
            '''
        }
    }
    stage('Test') {
      steps {
        sh '''
        echo üß™ Running test container in background...
    
        # Cleanup previous test container
        docker rm -f test-app || true
    
        # Start the container
        docker run -d -p 3000:3000 --name test-app ${IMAGE_NAME}:${TAG}
    
        echo ‚è≥ Waiting for container to initialize...
        sleep 5
    
        # Get container's internal IP
        CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' test-app)
    
        echo üîç Testing app at http://$CONTAINER_IP:3000
    
        # Try multiple times to connect before failing
        for i in {1..10}; do
          if curl -sSf http://$CONTAINER_IP:3000 > /dev/null; then
            echo ‚úÖ App is up!
            docker rm -f test-app
            exit 0
          fi
          echo "‚åõ Waiting for app to respond... ($i)"
          sleep 2
        done
    
        echo ‚ùå App failed to respond. Dumping logs:
        docker logs test-app
        docker rm -f test-app
        exit 1
        '''
      }
    }
    stage('Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
          sh '''
          echo üîê Logging in to DockerHub
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

          echo üì§ Pushing image
          docker push ${IMAGE_NAME}:${TAG}
          '''
        }
      }
    }
    stage('Deploy') {
      steps {
        sh 'kubectl apply -f kubernetes/'
      }
    }
  }
}
